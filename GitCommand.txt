Certainly! Below is a list of commonly used Git commands along with descriptions of what each command does. Git is a distributed version control system used for tracking changes in code repositories.

### Configuration Commands:

1. **git config**: Used for setting up and configuring Git settings.
   - `git config --global user.name "Your Name"`: Sets your name for all repositories.
   - `git config --global user.email "youremail@example.com"`: Sets your email for all repositories.
   - `git config --list`: Lists all Git configurations.

### Repository Initialization:

2. **git init**: Initializes a new Git repository in the current directory.

### Cloning:

3. **git clone**: Copies a remote repository to your local machine.
   - `git clone <repository_url>`: Clones a remote repository.

### Basic Workflow:

4. **git add**: Adds changes to the staging area.
   - `git add <file>`: Stages a specific file.
   - `git add .` or `git add -A`: Stages all changes.

5. **git status**: Shows the status of files in the working directory.

6. **git commit**: Records staged changes to the repository.
   - `git commit -m "Commit message"`: Commits staged changes with a message.

### Branching and Merging:

7. **git branch**: Lists branches and shows the current branch.
   - `git branch <branch_name>`: Creates a new branch.
   - `git branch -d <branch_name>`: Deletes a branch.

8. **git checkout**: Switches between branches or commits.
   - `git checkout <branch_name>`: Switches to an existing branch.
   - `git checkout -b <new_branch>`: Creates and switches to a new branch.
   - `git checkout <commit_hash>`: Checks out a specific commit.

9. **git merge**: Merges changes from one branch into another.
   - `git merge <branch_name>`: Merges changes from the specified branch into the current branch.

10. **git stash**: Temporarily saves changes without committing.
    - `git stash save "Description"`: Stashes changes with a description.
    - `git stash list`: Lists all stashes.
    - `git stash apply`: Applies the most recent stash.
    - `git stash pop`: Applies and removes the most recent stash.

### Remote Repositories:

11. **git remote**: Lists remote repositories.
    - `git remote add <name> <repository_url>`: Adds a remote repository.
    - `git remote -v`: Lists remote repositories with URLs.

12. **git push**: Pushes local commits to a remote repository.
    - `git push <remote_name> <branch_name>`: Pushes a branch to a remote repository.

13. **git pull**: Fetches and merges changes from a remote repository.

### History and Logs:

14. **git log**: Shows commit history.
    - `git log --oneline`: Displays compact commit history.
    - `git log --graph`: Displays a commit graph.

15. **git diff**: Shows differences between commits, branches, or files.
    - `git diff <source> <destination>`: Compares two branches or commits.
    - `git diff <file>`: Compares the working directory file with the last committed version.

16. **git blame**: Shows who made changes to each line in a file.

### Reverting and Resetting:

17. **git reset**: Resets the current HEAD to a specific state.
    - `git reset <commit>`: Moves HEAD to the specified commit.

18. **git revert**: Creates a new commit that undoes changes made in a previous commit.
    - `git revert <commit>`: Reverts the changes from a specific commit.

### Miscellaneous:

19. **git tag**: Creates, lists, or verifies tags.
    - `git tag <tag_name>`: Creates a lightweight tag.
    - `git tag -a <tag_name> -m "Message"`: Creates an annotated tag with a message.

20. **git blame**: Shows who made changes to each line in a file.

21. **gitignore**: A file that specifies files or directories to be ignored by Git.

These are some of the most commonly used Git commands. Git offers many more commands and options for managing version control, collaborating with others, and tracking changes in your codebase. Use `git --help` or `git <command> --help` for more information on specific commands.

Certainly! Here are some additional Git commands and their descriptions:

### Working with Remotes:

22. **git fetch**: Downloads objects and refs from another repository.
    - `git fetch <remote_name>`: Fetches changes from a remote repository.

23. **git remote update**: Updates remote-tracking branches.

24. **git remote remove**: Removes a remote repository.
    - `git remote remove <remote_name>`: Removes a remote repository from the list of remotes.

25. **git remote rename**: Renames a remote repository.
    - `git remote rename <old_name> <new_name>`: Renames a remote repository.

### Rebasing and Cherry-Picking:

26. **git rebase**: Reapplies commits on top of another base tip.
    - `git rebase <branch_name>`: Reapplies commits from the current branch on top of another branch.

27. **git cherry-pick**: Applies specific commits from one branch to another.
    - `git cherry-pick <commit>`: Applies the changes introduced by a specific commit to the current branch.

### Git Interactive Mode:

28. **git add -i**: Opens Git's interactive mode for selective staging and un-staging of changes.

### Submodules:

29. **git submodule**: Manages Git submodules within a repository.
    - `git submodule add <repository_url> <path>`: Adds a new submodule.
    - `git submodule update --init --recursive`: Initializes and updates submodules.

### Git Configurations:

30. **gitignore Global**: Specifies global `.gitignore` file.
    - `git config --global core.excludesfile ~/.gitignore_global`: Sets up a global `.gitignore` file.

### Git Hooks:

31. **Git Hooks**: Scripts that can be executed at certain points in Git workflow.
    - Hooks are located in the `.git/hooks` directory of a Git repository.

### Advanced Operations:

32. **git bisect**: Helps find a specific commit responsible for a bug using binary search.

33. **git reflog**: Shows a log of reference changes in the repository.

34. **git blame**: Shows who made changes to each line in a file.

35. **git archive**: Creates a compressed archive of a specified branch or commit.

These additional Git commands provide advanced functionality for managing complex version control scenarios and optimizing your development workflow. Be sure to refer to the official Git documentation or use `git --help` for detailed information on each command and its options.



गिट कमान्डश
============

## अनुवादित संस्करण
- [Versão em português](READMEpt.md)
- [Versión en español](READMEes.md)
- [Türkçe versiyon](READMEtr.md)
- [বাংলা সংস্করণ](READMEbn.md)
- [हिन्दी अनुवाद](READMEhi.md)

___

_आमतौर पर उपयोग किए जाने वाले गिट कमांड की सूची_

*यदि आप गिट उपनामों में रुचि रखते हैं, तो यहां `.bash_profile` पर एक नज़र डालें: https://github.com/joshnh/bash_profile/blob/master/.bash_profile*

--

### प्रोजेक्ट प्राप्त करना और बनाना

| कमान्ड | विवरण |
| ----- | ----- |
| `git init` | लोकल गिट रिपॉजिटरी को इनिशियलाइज़ करें |
| `git clone ssh://git@github.com/[username]/[repository-name].git` | अपनी रिपॉजिटरी की एक लोकल कॉपी बनाएँ |

### बेसिक स्नैपशॉटिंग

| कमान्ड | विवरण |
| ----- | ----- |
| `git status` | स्टेटस जांचीये |
| `git add [file-name.txt]` | फ़ाइल को स्टेजिंग एरिया जोड़ें |
| `git add -A` | सभी नई और परिवर्तित फ़ाइलें को स्टेजिंग एरिया जोड़ें |
| `git commit -m "[commit message]"` | चैन्जश को मेसज के साथ कमिट करे |
| `git rm -r [file-name.txt]` | एक फ़ाइल (या फ़ोल्डर) निकालें |

### ब्रान्चिंग और मर्जिंग

| कमान्ड | विवरण |
| ----- | ----- |
| `git branch` | ब्रांचश की सूची बनाएं (ऐस्टरिस्क[*] साइन वर्तमान शाखा को दर्शाता है) |
| `git branch -a` | सभी ब्रांचश की सूची बनाएं (लोकल और रिमोट) |
| `git branch [branch name]` | एक नई ब्रांच बनाएँ |
| `git branch -d [branch name]` | एक ब्रांच डिलीट करे |
| `git push origin --delete [branch name]` | एक रिमोट ब्रांच हटाएं |
| `git checkout -b [branch name]` | एक नई ब्रांच बनाएं और उसमें स्विच करें |
| `git checkout -b [branch name] origin/[branch name]` | एक रिमोट ब्रांच को क्लोन करें और उसमें स्विच करें |
| `git branch -m [old branch name] [new branch name]` | एक रिमोट ब्रांच का नाम बदलें |
| `git checkout [branch name]` | एक ब्रांच पर स्विच करें |
| `git checkout -` | पिछली बार चेक आउट की गई ब्रांच में स्विच करें |
| `git checkout -- [file-name.txt]` | किसी एक फ़ाइल में सभी परिवर्तन निकालें |
| `git merge [branch name]` | एक ब्रांच को ऐक्टिव ब्रांच में मर्ज करें |
| `git merge [source branch] [target branch]` | एक ब्रांच को टार्गेट ब्रांच में मर्ज करें |
| `git stash` | वर्किंग फोल्डर में चैन्जश को स्टैश करें |
| `git stash clear` | सभी स्टैश चैन्जश हटाएं |

### प्राजेक्ट्स को शेर और अप्डेट करना

| कमान्ड | विवरण |
| ----- | ----- |
| `git push origin [branch name]` | अपने रिमोट रिपॉजिटरी में ब्रांच को पुश करें |
| `git push -u origin [branch name]` | रिमोट रिपॉजिटरी में ब्रांच को पुश करें (और उसी ब्रांच को याद रखे) |
| `git push` | रिमोट रिपॉजिटरी में ब्रांच को पुश करें (उसी याद की गई ब्रांच में) |
| `git push origin --delete [branch name]` | एक रिमोट ब्रांच को डिलीट करे |
| `git pull` | अपनी लोकल रिपॉजिटरी को लेटेस्ट कमिट में अपडेट करें |
| `git pull origin [branch name]` | रिमोट रिपॉजिटरी में से चैन्जश पुल करे |
| `git remote add origin ssh://git@github.com/[username]/[repository-name].git` | एक रिमोट रिपॉजिटरी जोड़ें |
| `git remote set-url origin ssh://git@github.com/[username]/[repository-name].git` | रिपॉजिटरी की ओरिजिन ब्रांच को SSH पर सेट करें |

### निरीक्षण और तुलना

| कमान्ड | विवरण |
| ----- | ----- |
| `git log` | चैन्जश देखें |
| `git log --summary` | चैन्जश देखें (डीटेल में) |
| `git log --oneline` | चैन्जश देखें (संक्षेप में) |
| `git diff [source branch] [target branch]` | मर्जिंग से पहले चैन्जश की समीक्षा करें | 